[
  {
    "ref": "#/components/schemas/v1OwnerReference",
    "schema": {
      "title": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.\n+structType=atomic",
      "type": "object",
      "properties": {
        "uid": {
          "title": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        },
        "controller": {
          "title": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean"
        },
        "apiVersion": { "description": "API version of the referent.", "type": "string" },
        "kind": {
          "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "title": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "title": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean"
        }
      }
    }
  }
]
