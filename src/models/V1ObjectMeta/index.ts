import { V1ManagedFieldsEntryModelOptions as V1ManagedFieldsEntry } from '../V1ManagedFieldsEntry';
import { V1OwnerReferenceModelOptions as V1OwnerReference } from '../V1OwnerReference';
import { BaseModel } from '../types';
import type { V1ObjectMetaModelOptions } from './types';
import { validate } from './validation';

export * from './types';

export class V1ObjectMetaModel extends BaseModel {
  annotations?: { [key: string]: string };
  // Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.  The name in the go struct is changed to help clients detect accidental use.  +optional
  clusterName?: string;
  // Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
  creationTimestamp?: Date;
  deletionGracePeriodSeconds?: string;
  // Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
  deletionTimestamp?: Date;
  finalizers?: Array<string>;
  // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional
  generateName?: string;
  generation?: string;
  labels?: { [key: string]: string };
  // ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn\'t need to set or understand this field. A workflow can be the user\'s name, a controller\'s name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  +optional
  managedFields?: Array<V1ManagedFieldsEntry>;
  name?: string;
  // Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional
  namespace?: string;
  ownerReferences?: Array<V1OwnerReference>;
  // An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional
  resourceVersion?: string;
  selfLink?: string;
  // UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids +optional
  uid?: string;

  constructor(data: V1ObjectMetaModelOptions) {
    super();
    validate(data);
    this.annotations = data.annotations;
    this.clusterName = data.clusterName;
    this.creationTimestamp = data.creationTimestamp;
    this.deletionGracePeriodSeconds = data.deletionGracePeriodSeconds;
    this.deletionTimestamp = data.deletionTimestamp;
    this.finalizers = data.finalizers;
    this.generateName = data.generateName;
    this.generation = data.generation;
    this.labels = data.labels;
    this.managedFields = data.managedFields;
    this.name = data.name;
    this.namespace = data.namespace;
    this.ownerReferences = data.ownerReferences;
    this.resourceVersion = data.resourceVersion;
    this.selfLink = data.selfLink;
    this.uid = data.uid;
  }

  static create(data: V1ObjectMetaModelOptions): V1ObjectMetaModel {
    return new V1ObjectMetaModel(data);
  }

  toObject(): Partial<this> {
    return {
      annotations: this.annotations,
      clusterName: this.clusterName,
      creationTimestamp: this.creationTimestamp,
      deletionGracePeriodSeconds: this.deletionGracePeriodSeconds,
      deletionTimestamp: this.deletionTimestamp,
      finalizers: this.finalizers,
      generateName: this.generateName,
      generation: this.generation,
      labels: this.labels,
      managedFields: this.managedFields,
      name: this.name,
      namespace: this.namespace,
      ownerReferences: this.ownerReferences,
      resourceVersion: this.resourceVersion,
      selfLink: this.selfLink,
      uid: this.uid,
    } as Partial<this>;
  }
}

export default V1ObjectMetaModel;
